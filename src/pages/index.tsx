import { useState, Fragment } from "react";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { MagnifyingGlassIcon } from "@heroicons/react/20/solid";

import { api } from "~/utils/api";
import { z } from "zod";
import RaffleCard from "~/components/RaffleCard";
import Navbar from "~/components/Navbar";

const Home = () => {
  const [page, setPage] = useState(1);
  const [selectedButton, setSelectedButton] = useState("button1");
  const [searchQuery, setSearchQuery] = useState("");
  const allRaffles = api.raffle.getAllRaffles.useQuery();

  if (allRaffles.isLoading) {
    return (
      <div>
        <Navbar />
        <div className="flex h-screen items-center justify-center bg-[conic-gradient(at_bottom_right,_var(--tw-gradient-stops))] from-slate-900 via-[#59368B] to-slate-900">
          <Image src="/rings.svg" alt="loader" width={200} height={200} />
        </div>
      </div>
    );
  }

  if (!allRaffles.data || allRaffles.data.length === 0)
    return (
      <div>
        <Navbar />
        <div className="flex h-screen items-center justify-center bg-[conic-gradient(at_bottom_right,_var(--tw-gradient-stops))] from-slate-900 via-[#59368B] to-slate-900">
          <h1 className="text-4xl font-bold">No Raffles Found</h1>
        </div>
      </div>
    );

  const filteredRaffles = allRaffles.data.filter((raffle) =>
    raffle.nftTokenName!.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const activeRaffles = filteredRaffles
    .filter((raffle) => raffle.endDate! > new Date())
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  const pendingRaffles = filteredRaffles
    .filter((raffle) => raffle.endDate! < new Date() && !raffle.winnerPicked)
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  const completedRaffles = filteredRaffles
    .filter((raffle) => raffle.endDate! < new Date() && raffle.winnerPicked)
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  return (
    <>
      <Head>
        <title>Polygon Raffle App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="flex min-h-screen flex-col items-center bg-[conic-gradient(at_bottom_right,_var(--tw-gradient-stops))] from-slate-900 via-[#59368B] to-slate-900">
        <div className="w-full gap-12 px-4 py-16 md:px-12 lg:px-24">
          <div className="  z-50 mb-1 flex w-full flex-col justify-between py-3 pl-8 md:flex-row">
            <div className="mb-4 md:mb-0">
              <button
                type="button"
                className={`${
                  selectedButton === "button1" ? "bg-light " : "bg-transparent"
                } relative mr-8 -ml-px inline-flex items-center  rounded px-4 py-2 text-sm font-medium text-white hover:bg-light focus:z-10 focus:border-purple-500 focus:outline-none focus:ring-1 focus:ring-purple-500`}
                onClick={() => setSelectedButton("button1")}
                // className="relative mr-8 -ml-px inline-flex items-center  rounded bg-secondary px-4 py-2 text-sm font-medium text-white hover:bg-purple-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500"
              >
                Live Now
              </button>
              <button
                type="button"
                className={`${
                  selectedButton === "button2" ? "bg-light " : "bg-transparent"
                } relative mr-8 -ml-px inline-flex items-center  rounded px-4 py-2 text-sm font-medium text-white hover:bg-light focus:z-10 focus:border-purple-500 focus:outline-none focus:ring-1 focus:ring-purple-500`}
                onClick={() => setSelectedButton("button2")}
              >
                Pending Draw
              </button>
              <button
                type="button"
                className={`${
                  selectedButton === "button3" ? "bg-light " : "bg-transparent"
                } relative mr-8 -ml-px inline-flex items-center  rounded px-4 py-2 text-sm font-medium text-white hover:bg-light focus:z-10 focus:border-purple-500 focus:outline-none focus:ring-1 focus:ring-purple-500`}
                onClick={() => setSelectedButton("button3")}
              >
                Past Raffles
              </button>
            </div>
            <div className="flex items-center pr-8">
              <div className="relative w-72">
                <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                  <MagnifyingGlassIcon
                    className="h-5 w-5 text-gray-400"
                    aria-hidden="true"
                  />
                </div>
                <input
                  id="search"
                  name="search"
                  className="block w-full rounded-md border border-gray-300 bg-white py-2 pl-10 pr-3 leading-5 placeholder-gray-500 focus:border-newthird focus:placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-newthird sm:text-sm"
                  placeholder="Search Raffles..."
                  type="search"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>
          </div>

          <ul
            role="list"
            className="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2 sm:gap-x-6  lg:grid-cols-4 xl:gap-x-8"
          >
            {selectedButton === "button1" && (
              <>
                {!activeRaffles ||
                  (activeRaffles.length === 0 && (
                    <div className="ml-4 pl-8 font-mono text-xl text-light">
                      No Active Raffles Found
                    </div>
                  ))}
                {activeRaffles.map((raffle: any, index: any) => (
                  <li key={raffle.id} className="relative">
                    <Link href={`/raffles/${raffle.id}`}>
                      <RaffleCard
                        raffleId={raffle.id!}
                        imageUrl={raffle.nftTokenURI!}
                        nftName={raffle.nftTokenName!}
                        nftCollectionName={raffle.nftCollectionName!}
                        raffleEndDate={raffle.endDate!}
                        ticketPrice={raffle.ticketPrice}
                        ticketsRemaining={
                          raffle.ticketSupply - raffle.ticketsSold
                        }
                        totalTickets={raffle.ticketSupply}
                        isLast={index === allRaffles.data.length - 1}
                        newLimit={() => setPage(page + 1)}
                      />
                    </Link>
                  </li>
                ))}
              </>
            )}

            {selectedButton === "button2" && (
              <>
                {!pendingRaffles ||
                  (pendingRaffles.length === 0 && (
                    <div className="ml-4 pl-8 font-mono text-xl text-light">
                      No Pending Raffles Found
                    </div>
                  ))}
                {pendingRaffles.map((raffle: any, index: any) => (
                  <li key={raffle.id} className="relative">
                    <Link href={`/raffles/${raffle.id}`}>
                      <RaffleCard
                        raffleId={raffle.id!}
                        imageUrl={raffle.nftTokenURI!}
                        nftName={raffle.nftTokenName!}
                        nftCollectionName={raffle.nftCollectionName!}
                        raffleEndDate={raffle.endDate!}
                        ticketPrice={raffle.ticketPrice}
                        ticketsRemaining={
                          raffle.ticketSupply - raffle.ticketsSold
                        }
                        totalTickets={raffle.ticketSupply}
                        isLast={index === allRaffles.data.length - 1}
                        newLimit={() => setPage(page + 1)}
                      />
                    </Link>
                  </li>
                ))}
              </>
            )}

            {selectedButton === "button3" && (
              <>
                {!completedRaffles ||
                  (completedRaffles.length === 0 && (
                    <div className="ml-4 pl-8 font-mono text-xl text-light">
                      No Past Raffles Found
                    </div>
                  ))}
                {completedRaffles.map((raffle: any, index: any) => (
                  <li key={raffle.id} className="relative">
                    <Link href={`/raffles/${raffle.id}`}>
                      <RaffleCard
                        raffleId={raffle.id!}
                        imageUrl={raffle.nftTokenURI!}
                        nftName={raffle.nftTokenName!}
                        nftCollectionName={raffle.nftCollectionName!}
                        raffleEndDate={raffle.endDate!}
                        ticketPrice={raffle.ticketPrice}
                        ticketsRemaining={
                          raffle.ticketSupply - raffle.ticketsSold
                        }
                        totalTickets={raffle.ticketSupply}
                        isLast={index === allRaffles.data.length - 1}
                        newLimit={() => setPage(page + 1)}
                      />
                    </Link>
                  </li>
                ))}
              </>
            )}
          </ul>
        </div>
      </main>
    </>
  );
};

export default Home;
