import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { Switch } from "@headlessui/react";
import { MagnifyingGlassIcon } from "@heroicons/react/20/solid";
import { api } from "~/utils/api";
import RaffleCard from "~/components/RaffleCard";
import Navbar from "~/components/Navbar";
import Footer from "~/components/Footer";
import CarouselComponent from "~/components/CarouselComponent";
import Carousel from "~/components/Carousel";
import { verified } from "~/lib/verified";

function classNames(...classes: any[]) {
  return classes.filter(Boolean).join(" ");
}

const Home = () => {
  const [page, setPage] = useState(1);
  const [enabled, setEnabled] = useState(true);
  const [selectedButton, setSelectedButton] = useState("button1");
  const [searchQuery, setSearchQuery] = useState("");
  const allRaffles = api.raffle.getAllRaffles.useQuery();

  if (allRaffles.isLoading) {
    return (
      <div>
        <Navbar />
        <div className="flex h-screen items-center justify-center bg-[conic-gradient(at_bottom_right,_var(--tw-gradient-stops))] from-slate-900 via-[#59368B] to-slate-900">
          <Image src="/rings.svg" alt="loader" width={200} height={200} />
        </div>
      </div>
    );
  }

  if (!allRaffles.data || allRaffles.data.length === 0)
    return (
      <div>
        <Navbar />
        <div className="flex h-screen items-center justify-center bg-[conic-gradient(at_bottom_right,_var(--tw-gradient-stops))] from-slate-900 via-[#59368B] to-slate-900">
          <h1 className="text-4xl font-bold text-light">No Raffles Found</h1>
        </div>
      </div>
    );

  const filteredRaffles = allRaffles.data.filter((raffle) =>
    raffle.nftTokenName!.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const activeRaffles = filteredRaffles
    .filter((raffle) => raffle.endDate! > new Date())
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  const pendingRaffles = filteredRaffles
    .filter((raffle) => raffle.endDate! < new Date() && !raffle.winnerPicked)
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  const completedRaffles = filteredRaffles
    .filter((raffle) => raffle.endDate! < new Date() && raffle.winnerPicked)
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  const activeRafflesVerified = filteredRaffles
    .filter(
      (raffle) =>
        raffle.endDate! > new Date() &&
        verified.some(
          (address) =>
            address.toLowerCase() === raffle.nftContractAddress.toLowerCase()
        )
    )
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  const pendingRafflesVerified = filteredRaffles
    .filter(
      (raffle) =>
        raffle.endDate! < new Date() &&
        !raffle.winnerPicked &&
        verified.some(
          (address) =>
            address.toLowerCase() === raffle.nftContractAddress.toLowerCase()
        )
    )
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  const completedRafflesVerified = filteredRaffles
    .filter(
      (raffle) =>
        raffle.endDate! < new Date() &&
        raffle.winnerPicked &&
        verified.some(
          (address) =>
            address.toLowerCase() === raffle.nftContractAddress.toLowerCase()
        )
    )
    .sort((a, b) => a.endDate!.getTime() - b.endDate!.getTime());

  return (
    <>
      <Head>
        <title>Polygon NFT Raffle Platform</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="flex min-h-screen flex-col items-center bg-[conic-gradient(at_bottom_right,_var(--tw-gradient-stops))] from-slate-900 via-[#59368B] to-slate-900">
        <div className="w-full gap-12 px-4 pb-8 md:px-12 lg:px-24">
          <Carousel />
          {/* <CarouselComponent
            collectionName="The Sandbox"
            collectionDescription="a sample description of this NFT project for the banner"
            collectionBannerUrl="/sandbox_banner.jpeg"
            collectionLogoUrl="/sandbox_logo.jpeg"
            marketplaceUrl="https://polygon.magiceden.io/collections/polygon/0x9d305a42a3975ee4c1c57555bed5919889dce63f"
            marketplaceName="MagicEden"
          /> */}
          <div className="mt-8 flex flex-col items-center text-center">
            <h1 className="font-mono text-2xl tracking-wide text-white md:text-4xl">
              Polygon's Premier NFT Raffle Platform
            </h1>
            <h4 className="mt-4 font-mono text-sm text-light md:text-lg">
              <span className="text-gray-200">Create Raffles</span> |{" "}
              <span className="text-gray-200">Buy Tickets</span> |{" "}
              <span className="text-gray-200">Win NFTs</span>
            </h4>
          </div>
          <div className="  z-50 mb-1 flex w-full flex-col justify-between pt-8 pb-4  md:flex-row">
            <div className="mb-4 md:mb-0">
              <button
                type="button"
                className={`${
                  selectedButton === "button1" ? "bg-light " : "bg-transparent"
                } relative mr-8 -ml-px inline-flex items-center  rounded px-4 py-2 text-sm font-medium text-white hover:bg-light focus:z-10 focus:border-purple-500 focus:outline-none focus:ring-1 focus:ring-purple-500`}
                onClick={() => setSelectedButton("button1")}
              >
                Live Now
              </button>
              <button
                type="button"
                className={`${
                  selectedButton === "button2" ? "bg-light " : "bg-transparent"
                } relative mr-8 -ml-px inline-flex items-center  rounded px-4 py-2 text-sm font-medium text-white hover:bg-light focus:z-10 focus:border-purple-500 focus:outline-none focus:ring-1 focus:ring-purple-500`}
                onClick={() => setSelectedButton("button2")}
              >
                Pending Draw
              </button>
              <button
                type="button"
                className={`${
                  selectedButton === "button3" ? "bg-light " : "bg-transparent"
                } relative mr-8 -ml-px inline-flex items-center  rounded px-4 py-2 text-sm font-medium text-white hover:bg-light focus:z-10 focus:border-purple-500 focus:outline-none focus:ring-1 focus:ring-purple-500`}
                onClick={() => setSelectedButton("button3")}
              >
                Past Raffles
              </button>
            </div>
            <div className="flex items-center">
              <div
                className="mr-6 flex flex-col items-center"
                title="Toggle between verified only and all collections"
              >
                <label
                  htmlFor="verified"
                  className="pb-1 text-sm font-medium text-light"
                >
                  {enabled ? "Verified Only" : "All Collections"}
                </label>
                <Switch
                  checked={enabled}
                  onChange={setEnabled}
                  className={classNames(
                    enabled ? "bg-light" : "bg-gray-200",
                    "relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2"
                  )}
                >
                  <span className="sr-only">Use setting</span>
                  <span
                    className={classNames(
                      enabled ? "translate-x-5" : "translate-x-0",
                      "pointer-events-none relative inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out"
                    )}
                  >
                    <span
                      className={classNames(
                        enabled
                          ? "opacity-0 duration-100 ease-out"
                          : "opacity-100 duration-200 ease-in",
                        "absolute inset-0 flex h-full w-full items-center justify-center transition-opacity"
                      )}
                      aria-hidden="true"
                    >
                      <svg
                        className="h-3 w-3 text-gray-400"
                        fill="none"
                        viewBox="0 0 12 12"
                      >
                        <path
                          d="M4 8l2-2m0 0l2-2M6 6L4 4m2 2l2 2"
                          stroke="currentColor"
                          strokeWidth={2}
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </span>
                    <span
                      className={classNames(
                        enabled
                          ? "opacity-100 duration-200 ease-in"
                          : "opacity-0 duration-100 ease-out",
                        "absolute inset-0 flex h-full w-full items-center justify-center transition-opacity"
                      )}
                      aria-hidden="true"
                    >
                      <svg
                        className="h-3 w-3 text-secondary"
                        fill="currentColor"
                        viewBox="0 0 12 12"
                      >
                        <path d="M3.707 5.293a1 1 0 00-1.414 1.414l1.414-1.414zM5 8l-.707.707a1 1 0 001.414 0L5 8zm4.707-3.293a1 1 0 00-1.414-1.414l1.414 1.414zm-7.414 2l2 2 1.414-1.414-2-2-1.414 1.414zm3.414 2l4-4-1.414-1.414-4 4 1.414 1.414z" />
                      </svg>
                    </span>
                  </span>
                </Switch>
              </div>

              <div className="relative w-72">
                <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                  <MagnifyingGlassIcon
                    className="h-5 w-5 text-gray-400"
                    aria-hidden="true"
                  />
                </div>
                <input
                  id="search"
                  name="search"
                  className="block w-full rounded-md border border-secondary bg-white py-2 pl-10 pr-3 leading-5 placeholder-gray-500 focus:border-secondary focus:placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-secondary sm:text-sm"
                  placeholder="Search Raffles..."
                  type="search"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>
          </div>

          <ul
            role="list"
            className="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2 sm:gap-x-6  lg:grid-cols-4 xl:gap-x-8"
          >
            {selectedButton === "button1" && (
              <>
                {!activeRaffles ||
                  (activeRaffles.length === 0 && (
                    <div className="ml-4 pl-8 font-mono text-xl text-light">
                      No Active Raffles Found
                    </div>
                  ))}
                {enabled &&
                  activeRafflesVerified.map((raffle: any, index: any) => (
                    <li key={raffle.id} className="relative">
                      <Link href={`/raffles/${raffle.id}`}>
                        <RaffleCard
                          raffleId={raffle.id!}
                          imageUrl={raffle.nftTokenURI!}
                          nftName={raffle.nftTokenName!}
                          nftCollectionName={raffle.nftCollectionName!}
                          nftContractAddress={raffle.nftContractAddress!}
                          raffleEndDate={raffle.endDate!}
                          ticketPrice={raffle.ticketPrice}
                          ticketsRemaining={
                            raffle.ticketSupply - raffle.ticketsSold
                          }
                          totalTickets={raffle.ticketSupply}
                          isLast={index === allRaffles.data.length - 1}
                          newLimit={() => setPage(page + 1)}
                          contractRaffleId={raffle.contractRaffleId}
                        />
                      </Link>
                    </li>
                  ))}
                {!enabled &&
                  activeRaffles.map((raffle: any, index: any) => (
                    <li key={raffle.id} className="relative">
                      <Link href={`/raffles/${raffle.id}`}>
                        <RaffleCard
                          raffleId={raffle.id!}
                          imageUrl={raffle.nftTokenURI!}
                          nftName={raffle.nftTokenName!}
                          nftCollectionName={raffle.nftCollectionName!}
                          nftContractAddress={raffle.nftContractAddress!}
                          raffleEndDate={raffle.endDate!}
                          ticketPrice={raffle.ticketPrice}
                          ticketsRemaining={
                            raffle.ticketSupply - raffle.ticketsSold
                          }
                          totalTickets={raffle.ticketSupply}
                          isLast={index === allRaffles.data.length - 1}
                          newLimit={() => setPage(page + 1)}
                          contractRaffleId={raffle.contractRaffleId}
                        />
                      </Link>
                    </li>
                  ))}
              </>
            )}

            {selectedButton === "button2" && (
              <>
                {!pendingRaffles ||
                  (pendingRaffles.length === 0 && (
                    <div className="ml-4 pl-8 font-mono text-xl text-light">
                      No Pending Raffles Found
                    </div>
                  ))}
                {enabled &&
                  pendingRafflesVerified.map((raffle: any, index: any) => (
                    <li key={raffle.id} className="relative">
                      <Link href={`/raffles/${raffle.id}`}>
                        <RaffleCard
                          raffleId={raffle.id!}
                          imageUrl={raffle.nftTokenURI!}
                          nftName={raffle.nftTokenName!}
                          nftCollectionName={raffle.nftCollectionName!}
                          nftContractAddress={raffle.nftContractAddress!}
                          raffleEndDate={raffle.endDate!}
                          ticketPrice={raffle.ticketPrice}
                          ticketsRemaining={
                            raffle.ticketSupply - raffle.ticketsSold
                          }
                          totalTickets={raffle.ticketSupply}
                          isLast={index === allRaffles.data.length - 1}
                          newLimit={() => setPage(page + 1)}
                          contractRaffleId={raffle.contractRaffleId}
                        />
                      </Link>
                    </li>
                  ))}
                {!enabled &&
                  pendingRaffles.map((raffle: any, index: any) => (
                    <li key={raffle.id} className="relative">
                      <Link href={`/raffles/${raffle.id}`}>
                        <RaffleCard
                          raffleId={raffle.id!}
                          imageUrl={raffle.nftTokenURI!}
                          nftName={raffle.nftTokenName!}
                          nftCollectionName={raffle.nftCollectionName!}
                          nftContractAddress={raffle.nftContractAddress!}
                          raffleEndDate={raffle.endDate!}
                          ticketPrice={raffle.ticketPrice}
                          ticketsRemaining={
                            raffle.ticketSupply - raffle.ticketsSold
                          }
                          totalTickets={raffle.ticketSupply}
                          isLast={index === allRaffles.data.length - 1}
                          newLimit={() => setPage(page + 1)}
                          contractRaffleId={raffle.contractRaffleId}
                        />
                      </Link>
                    </li>
                  ))}
              </>
            )}

            {selectedButton === "button3" && (
              <>
                {!completedRaffles ||
                  (completedRaffles.length === 0 && (
                    <div className="ml-4 pl-8 font-mono text-xl text-light">
                      No Past Raffles Found
                    </div>
                  ))}
                {enabled &&
                  completedRafflesVerified.map((raffle: any, index: any) => (
                    <li key={raffle.id} className="relative">
                      <Link href={`/raffles/${raffle.id}`}>
                        <RaffleCard
                          raffleId={raffle.id!}
                          imageUrl={raffle.nftTokenURI!}
                          nftName={raffle.nftTokenName!}
                          nftCollectionName={raffle.nftCollectionName!}
                          nftContractAddress={raffle.nftContractAddress!}
                          raffleEndDate={raffle.endDate!}
                          ticketPrice={raffle.ticketPrice}
                          ticketsRemaining={
                            raffle.ticketSupply - raffle.ticketsSold
                          }
                          totalTickets={raffle.ticketSupply}
                          isLast={index === allRaffles.data.length - 1}
                          newLimit={() => setPage(page + 1)}
                          contractRaffleId={raffle.contractRaffleId}
                        />
                      </Link>
                    </li>
                  ))}
                {!enabled &&
                  completedRaffles.map((raffle: any, index: any) => (
                    <li key={raffle.id} className="relative">
                      <Link href={`/raffles/${raffle.id}`}>
                        <RaffleCard
                          raffleId={raffle.id!}
                          imageUrl={raffle.nftTokenURI!}
                          nftName={raffle.nftTokenName!}
                          nftCollectionName={raffle.nftCollectionName!}
                          nftContractAddress={raffle.nftContractAddress!}
                          raffleEndDate={raffle.endDate!}
                          ticketPrice={raffle.ticketPrice}
                          ticketsRemaining={
                            raffle.ticketSupply - raffle.ticketsSold
                          }
                          totalTickets={raffle.ticketSupply}
                          isLast={index === allRaffles.data.length - 1}
                          newLimit={() => setPage(page + 1)}
                          contractRaffleId={raffle.contractRaffleId}
                        />
                      </Link>
                    </li>
                  ))}
              </>
            )}
          </ul>
        </div>
      </main>
      <Footer />
    </>
  );
};

export default Home;
